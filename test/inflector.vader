Execute(Setup):
    let available_inputs = [
          \ 'some text to work',
          \ 'Some Text To Work',
          \ 'SomeTextToWork',
          \ 'someTextToWork',
          \ 'Some_Text_To_Work',
          \ 'SOME_TEXT_TO_WORK',
          \ 'some_text_to_work',
          \ '_some_text_to_work',
          \ 'some-text-to-work',
          \ ]

Execute(Tests for Sanitize):

    let sanitized_words = ['some', 'text', 'to', 'work']
    for input in available_inputs
        AssertEqual sanitized_words, Sanitize(input)
    endfor

Execute(Tests for Constantize):

    for input in available_inputs
        AssertEqual 'SOME_TEXT_TO_WORK', Constantize(input)
    endfor

Execute(Tests for Privatize):

  AssertEqual '_some_var', Privatize('some_var')
  AssertEqual '_some_var', Privatize('_some_var')

Execute(Tests for Capitalize):

  AssertEqual 'Big', Capitalize('big')
  AssertEqual 'Big', Capitalize('BIG')

Execute(Tests for Titleize):

    for input in available_inputs
        AssertEqual 'Some Text To Work', Titleize(input)
    endfor

Execute(Tests for Underscore):

    for input in available_inputs
        AssertEqual 'some_text_to_work', Underscore(input)
    endfor

Execute(Tests for Pascalize):

    for input in available_inputs
        AssertEqual 'SomeTextToWork', Pascalize(input)
    endfor

Execute(Tests for Dasherize):

    for input in available_inputs
        AssertEqual 'some-text-to-work', Dasherize(input)
    endfor

Execute(Tests for Dotify):

    for input in available_inputs
        AssertEqual 'some.text.to.work', Dotify(input)
    endfor

Execute(Tests for Camelize):

    for input in available_inputs
        AssertEqual 'someTextToWork', Camelize(input)
    endfor

Execute(Tests for Normalize):

    for input in available_inputs
        AssertEqual 'some text to work', Normalize(input)
    endfor

Execute(Setup mappings):
    nmap gI <Plug>(Inflect)
    vmap gI <Plug>(Inflect)

Given(Some input):
    some text to work

Do(Capitalize in normal mode):
    ^gI$C

Expect(Capitalized text):
    SOME_TEXT_TO_WORK

Given(Some input):
    some text to work

Do(Capitalize in visual mode):
    ^v$gIC

Expect(Capitalized text):
    SOME_TEXT_TO_WORK
