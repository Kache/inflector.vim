Execute(Setup):

    let g:sid = matchlist(execute('scriptnames'), '\([0-9]\+\): [^ ]*plugin/inflector.vim')[1]

    function! g:ExecutePrivateFunc(function_name, str)
        let l:function_name = "<snr>" . g:sid . "_" . a:function_name
        let l:PrivateFunction = function(l:function_name)
        return PrivateFunction(a:str)
    endfunction

    let g:available_inputs = [
          \ 'some text to work',
          \ 'Some Text To Work',
          \ 'SomeTextToWork',
          \ 'someTextToWork',
          \ 'Some_Text_To_Work',
          \ 'SOME_TEXT_TO_WORK',
          \ 'some_text_to_work',
          \ '_some_text_to_work',
          \ 'some-text-to-work',
          \ ]

Execute(Tests for Sanitize):

    let sanitized_words = ['some', 'text', 'to', 'work']

    for input in g:available_inputs
        AssertEqual sanitized_words, g:ExecutePrivateFunc('Sanitize', input)
    endfor

Execute(Tests for Constantize):

    for input in g:available_inputs
        AssertEqual 'SOME_TEXT_TO_WORK', g:ExecutePrivateFunc('Constantize', input)
    endfor

Execute(Tests for Privatize):

  AssertEqual '_some_var', g:ExecutePrivateFunc('Privatize', 'some_var')
  AssertEqual '_some_var', g:ExecutePrivateFunc('Privatize', '_some_var')

Execute(Tests for Capitalize):

  AssertEqual 'Big', g:ExecutePrivateFunc('Capitalize','big')
  AssertEqual 'Big', g:ExecutePrivateFunc('Capitalize','BIG')

Execute(Tests for Titleize):

    for input in g:available_inputs
        AssertEqual 'Some Text To Work', g:ExecutePrivateFunc('Titleize', input)
    endfor

Execute(Tests for Underscore):

    for input in g:available_inputs
        AssertEqual 'some_text_to_work', g:ExecutePrivateFunc('Underscore', input)
    endfor

Execute(Tests for Pascalize):

    for input in g:available_inputs
        AssertEqual 'SomeTextToWork', g:ExecutePrivateFunc('Pascalize', input)
    endfor

Execute(Tests for Dasherize):

    for input in g:available_inputs
        AssertEqual 'some-text-to-work', g:ExecutePrivateFunc('Dasherize', input)
    endfor

Execute(Tests for Dotify):

    for input in g:available_inputs
        AssertEqual 'some.text.to.work', g:ExecutePrivateFunc('Dotify', input)
    endfor

Execute(Tests for Camelize):

    for input in g:available_inputs
        AssertEqual 'someTextToWork', g:ExecutePrivateFunc('Camelize', input)
    endfor

Execute(Tests for Normalize):

    for input in g:available_inputs
        AssertEqual 'some text to work', g:ExecutePrivateFunc('Normalize', input)
    endfor

Execute(Setup mappings):
    nmap gI <Plug>(Inflect)
    vmap gI <Plug>(Inflect)

Given(Some input):
    some text to work

Do(Capitalize in normal mode):
    ^gI$C

Expect(Capitalized text):
    SOME_TEXT_TO_WORK

Given(Some input):
    some text to work

Do(Capitalize in visual mode):
    ^v$gIC

Expect(Capitalized text):
    SOME_TEXT_TO_WORK
